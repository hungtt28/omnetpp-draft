//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/geoRouting/GeoPacket.msg.
//

#ifndef _GEOPACKET_M_H_
#define _GEOPACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/geoRouting/GeoPacket.msg:26</tt> by nedtool.
 * <pre>
 * enum GeoPacketDef
 * {
 * 
 *     GEO_BEACON_PACKET = 0;
 *     GEO_ROUTING_PACKET = 1;
 * }
 * </pre>
 */
enum GeoPacketDef {
    GEO_BEACON_PACKET = 0,
    GEO_ROUTING_PACKET = 1
};

/**
 * Class generated from <tt>src/node/communication/routing/geoRouting/GeoPacket.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // The GEO packet is parent packet to define packet type
 * //
 * packet GeoPacket extends RoutingPacket
 * {
 *     int geoPacketType @enum(GeoPacketDef);
 * 
 * 	// for extend data
 * }
 * </pre>
 */
class GeoPacket : public ::RoutingPacket
{
  protected:
    int geoPacketType_var;

  private:
    void copy(const GeoPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GeoPacket&);

  public:
    GeoPacket(const char *name=NULL, int kind=0);
    GeoPacket(const GeoPacket& other);
    virtual ~GeoPacket();
    GeoPacket& operator=(const GeoPacket& other);
    virtual GeoPacket *dup() const {return new GeoPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getGeoPacketType() const;
    virtual void setGeoPacketType(int geoPacketType);
};

inline void doPacking(cCommBuffer *b, GeoPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GeoPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef _GEOPACKET_M_H_

